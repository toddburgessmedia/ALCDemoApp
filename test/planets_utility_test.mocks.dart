// Mocks generated by Mockito 5.0.14 from annotations
// in mars_flutter/test/planets_utility_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:chopper/chopper.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mars_flutter/repository/mars_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeChopperClient_0 extends _i1.Fake implements _i2.ChopperClient {}

class _FakeType_1 extends _i1.Fake implements Type {}

class _FakeResponse_2<BodyType> extends _i1.Fake
    implements _i2.Response<BodyType> {}

class _FakeBaseResponse_3 extends _i1.Fake implements _i3.BaseResponse {}

/// A class which mocks [MarsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarsService extends _i1.Mock implements _i4.MarsService {
  MockMarsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChopperClient get client =>
      (super.noSuchMethod(Invocation.getter(#client),
          returnValue: _FakeChopperClient_0()) as _i2.ChopperClient);
  @override
  set client(_i2.ChopperClient? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  Type get definitionType =>
      (super.noSuchMethod(Invocation.getter(#definitionType),
          returnValue: _FakeType_1()) as Type);
  @override
  _i5.Future<_i2.Response<dynamic>> getMars() => (super.noSuchMethod(
          Invocation.method(#getMars, []),
          returnValue:
              Future<_i2.Response<dynamic>>.value(_FakeResponse_2<dynamic>()))
      as _i5.Future<_i2.Response<dynamic>>);
  @override
  _i5.Future<_i2.Response<dynamic>> getPlanets() => (super.noSuchMethod(
          Invocation.method(#getPlanets, []),
          returnValue:
              Future<_i2.Response<dynamic>>.value(_FakeResponse_2<dynamic>()))
      as _i5.Future<_i2.Response<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockResponse<BodyType> extends _i1.Mock
    implements _i2.Response<BodyType> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BaseResponse get base => (super.noSuchMethod(Invocation.getter(#base),
      returnValue: _FakeBaseResponse_3()) as _i3.BaseResponse);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  bool get isSuccessful =>
      (super.noSuchMethod(Invocation.getter(#isSuccessful), returnValue: false)
          as bool);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  _i6.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i6.Uint8List(0)) as _i6.Uint8List);
  @override
  String get bodyString =>
      (super.noSuchMethod(Invocation.getter(#bodyString), returnValue: '')
          as String);
  @override
  _i2.Response<NewBodyType> copyWith<NewBodyType>(
          {_i3.BaseResponse? base, NewBodyType? body, Object? bodyError}) =>
      (super.noSuchMethod(
          Invocation.method(
              #copyWith, [], {#base: base, #body: body, #bodyError: bodyError}),
          returnValue:
              _FakeResponse_2<NewBodyType>()) as _i2.Response<NewBodyType>);
  @override
  String toString() => super.toString();
}
